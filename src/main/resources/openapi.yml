openapi: 3.0.3
info:
  title: PetMatch API
  description: API para sistema de adoção de animais
  version: 1.0.0
  contact:
    name: PetMatch Support
servers:
  - url: http://localhost:5000
    description: Servidor de Desenvolvimento
tags:
  - name: Usuários
    description: Gerenciamento de usuários (Admin, Adotante, ONG)
  - name: Animais
    description: Gerenciamento de animais para adoção
  - name: Imagens
    description: Upload e download de imagens
  - name: Autenticação
    description: Login e autenticação JWT
  - name: Eventos
    description: Gerenciamento de eventos de adoção
  - name: Adoção
    description: Gerenciamento do processo de adoção e interesse
paths:
  /v1/api/auth/register:
    post:
      tags:
        - Autenticação
      summary: Registrar novo usuário
      description: Cria um novo usuário no sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: "usuario@exemplo.com"
              password: "Senha@123"
              name: "João Silva"
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: Dados inválidos
        '409':
          description: Email já cadastrado
  /v1/api/auth/login:
    post:
      tags:
        - Autenticação
      summary: Login de usuário
      description: Autentica um usuário (Admin, Adotante ou ONG) e retorna um token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "usuario@exemplo.com"
              password: "Senha@123"
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciais inválidas
        '400':
          description: Dados inválidos
  /v1/api/auth/loginprova:
    post:
      tags:
        - Autenticação
      summary: Login de teste (DEV ONLY)
      description: Endpoint de teste que força credenciais fixas - REMOVER EM PRODUÇÃO
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /v1/api/usuarios/admin:
    post:
      tags:
        - Usuários
      summary: Cadastrar Admin
      description: Cria um novo usuário administrador
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdminDto'
      responses:
        '201':
          description: Admin criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUsuarioResponse'
        '400':
          description: Dados inválidos
        '409':
          description: Email já cadastrado
  /v1/api/usuarios/adotante:
    post:
      tags:
        - Usuários
      summary: Cadastrar Adotante
      description: Cria um novo usuário adotante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdotanteDto'
            example:
              name: "Maria Silva Santos"
              email: "maria.silva@teste.com"
              password: "SenhaSegura@123"
              cpf: "12345678900"
              endereco: "Rua das Flores, 123, Centro"
              celular: "19987654321"
              descricaoOutrosAnimais: "Possuo 1 gato castrado"
              preferencia: "Cachorro de porte pequeno"
      responses:
        '201':
          description: Adotante criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUsuarioResponse'
        '400':
          description: Dados inválidos
        '409':
          description: Email ou CPF já cadastrado
  /v1/api/usuarios/ong:
    post:
      tags:
        - Usuários
      summary: Cadastrar ONG
      description: Cria um novo usuário ONG
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterOngDto'
      responses:
        '201':
          description: ONG criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUsuarioResponse'
        '400':
          description: Dados inválidos
        '409':
          description: Email já cadastrado
  /v1/api/usuarios/me:
    get:
      tags:
        - Usuários
      summary: Obter dados do usuário autenticado
      description: Retorna informações do usuário logado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dados do usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyUserDto'
        '401':
          description: Não autenticado
  /v1/api/usuarios/photo:
    put:
      tags:
        - Usuários
      summary: Upload de foto do usuário
      description: Faz upload da foto de perfil do usuário autenticado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Arquivo de imagem (JPEG, PNG, etc)
      responses:
        '200':
          description: Foto atualizada com sucesso
        '400':
          description: Arquivo inválido
        '401':
          description: Não autenticado
  /images/{filename}:
    get:
      tags:
        - Imagens
      summary: Obter imagem
      description: Retorna uma imagem armazenada no servidor
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Nome do arquivo de imagem
          example: "user_photo_123.jpg"
        - name: thumbnail
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Se true, retorna a thumbnail da imagem (150x150px)
      responses:
        '200':
          description: Imagem encontrada
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
        '44':
          description: Imagem não encontrada
        '500':
          description: Erro ao processar imagem
  /v1/api/animais:
    get:
      tags:
        - Animais
      summary: Listar todos os animais
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de animais
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
        '401':
          description: Não autenticado
    post:
      tags:
        - Animais
      summary: Cadastrar novo animal (Apenas ONGs)
      description: Apenas usuários com acesso ONG podem cadastrar animais
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalInput'
      responses:
        '201':
          description: Animal criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        '400':
          description: Dados inválidos
        '401':
          description: Não autenticado
        '403':
          description: Apenas ONGs podem cadastrar animais
  /v1/api/animais/{id}:
    get:
      tags:
        - Animais
      summary: Buscar animal por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Animal encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        '404':
          description: Animal não encontrado
        '401':
          description: Não autenticado
    put:
      tags:
        - Animais
      summary: Atualizar animal
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalInput'
      responses:
        '200':
          description: Animal atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        '404':
          description: Animal não encontrado
        '401':
          description: Não autenticado
    delete:
      tags:
        - Animais
      summary: Deletar animal
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Animal deletado com sucesso
        '404':
          description: Animal não encontrado
        '401':
          description: Não autenticado
  /v1/api/animais/sexo/{sexo}:
    get:
      tags:
        - Animais
      summary: Buscar animais por sexo
      security:
        - bearerAuth: []
      parameters:
        - name: sexo
          in: path
          required: true
          schema:
            type: string
            enum: [M, F]
      responses:
        '200':
          description: Lista de animais
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
  /v1/api/animais/raca/{raca}:
    get:
      tags:
        - Animais
      summary: Buscar animais por raça
      security:
        - bearerAuth: []
      parameters:
        - name: raca
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de animais
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
  /v1/api/eventos:
    get:
      tags:
        - Eventos
      summary: Listar todos os eventos
      description: Retorna lista com todos os eventos de adoção cadastrados
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de eventos retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventoResponseDto'
        '401':
          description: Token ausente ou inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
    post:
      tags:
        - Eventos
      summary: Criar novo evento
      description: |
        **Apenas ONGs podem criar eventos**
        
        Cria um novo evento de adoção. O ID da ONG é obtido automaticamente do token JWT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriarEventoDto'
            example:
              titulo: "Adoção em Belo Horizonte"
              descricao: "Grande evento de adoção com mais de 50 animais"
              dataEvento: "2025-12-10T10:00:00Z"
              local: "Praça da Estação, Belo Horizonte"
      responses:
        '201':
          description: Evento criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventoResponseDto'
        '400':
          description: Requisição inválida (dados obrigatórios ausentes ou formato incorreto)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '401':
          description: Token ausente ou inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '403':
          description: Usuário não possui permissão para criar eventos (apenas ONG)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
  /v1/api/eventos/{id}:
    get:
      tags:
        - Eventos
      summary: Buscar evento por ID
      description: Retorna os detalhes de um evento específico baseado em seu ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do evento (UUID)
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Evento encontrado e retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventoResponseDto'
        '401':
          description: Token ausente ou inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '404':
          description: Evento não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
    delete:
      tags:
        - Eventos
      summary: Deletar evento por ID
      description: |
        **Apenas a ONG criadora pode deletar seu evento**

        Deleta um evento específico do sistema. O evento é excluído permanentemente.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do evento a ser deletado (UUID)
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '204':
          description: Evento deletado com sucesso (sem conteúdo na resposta)
        '401':
          description: Token ausente ou inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '403':
          description: Usuário não possui permissão para deletar este evento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '404':
          description: Evento não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErroResponse'
  /v1/api/adocao/animal/{animalId}/match:
    post:
      tags:
        - Adoção
      summary: Registrar interesse em um animal
      description: Registra o interesse do usuário logado (adotante) em um animal específico.
      security:
        - bearerAuth: []
      parameters:
        - name: animalId
          in: path
          required: true
          description: ID do animal (UUID)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Interesse registrado com sucesso
        '401':
          description: Não autenticado
        '404':
          description: Animal ou Usuário não encontrado
        '409':
          description: Usuário já demonstrou interesse (IllegalStateException)
  /v1/api/adocao/animal/{animalId}/lista-espera:
    get:
      tags:
        - Adoção
      summary: Listar interessados em um animal
      description: Retorna a lista de usuários (pendentes) interessados em um animal (provavelmente para ONGs).
      security:
        - bearerAuth: []
      parameters:
        - name: animalId
          in: path
          required: true
          description: ID do animal (UUID)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lista de interessados retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InteresseResponseDTO'
        '401':
          description: Não autenticado
        '404':
          description: Animal não encontrado
  /v1/api/adocao/interesse/{interesseId}/avaliar:
    put:
      tags:
        - Adoção
      summary: Avaliar interesse de adoção
      description: Permite que a ONG aprove ou rejeite um interesse de adoção.
      security:
        - bearerAuth: []
      parameters:
        - name: interesseId
          in: path
          required: true
          description: ID do interesse (UUID)
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvaliarInteresseRequest'
      responses:
        '200':
          description: Interesse avaliado com sucesso
        '400':
          description: Status inválido (ex: tentar mudar para PENDENTE)
        '401':
          description: Não autenticado
        '404':
          description: Interesse de adoção não encontrado
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Autenticação com token JWT.

        **Formato:** `Authorization: Bearer {token}`

        O token é obtido através do endpoint `/v1/api/auth/login` e permanece válido por 24 horas.
  schemas:
    RegisterAdminDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 3
          example: "Admin Silva"
        email:
          type: string
          format: email
          example: "admin@petmatch.com"
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*[A-Z])(?=.*[!@#$%^&*()_+\-=\[\]{};'':"\\|,.<>\/?]).{8,}$'
          example: "AdminPass@123"
        cpfOuCnpj:
          type: string
          example: "12345678900 ou 12345678000190"
    RegisterAdotanteDto:
      type: object
      required:
        - name
        - email
        - password
        - cpf
      properties:
        name:
          type: string
          minLength: 3
          example: "Maria Silva Santos"
        email:
          type: string
          format: email
          example: "maria.silva@email.com"
        password:
          type: string
          minLength: 8
          example: "SenhaSegura@123"
        cpf:
          type: string
          example: "12345678900"
        endereco:
          type: string
          example: "Rua das Flores, 123, Centro"
        celular:
          type: string
          example: "19987654321"
        descricaoOutrosAnimais:
          type: string
          example: "Possuo 1 gato castrado de 3 anos"
        preferencia:
          type: string
          example: "Cachorro de porte pequeno ou médio"
    RegisterOngDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 3
          example: "ONG Amigos dos Animais"
        email:
          type: string
          format: email
          example: "contato@onganimais.com"
        password:
          type: string
          minLength: 8
          example: "OngPass@123"
        cnpj:
          type: string
          example: "12345678000190"
        endereco:
          type: string
        telefone:
          type: string
    CreatedUsuarioResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
    MyUserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        picture:
          type: string
          nullable: true
        accessLevel:
          type: string
          enum: [ADMIN, ADOTANTE, ONG]
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          example: "usuario@exemplo.com"
        password:
          type: string
          minLength: 8
          example: "Senha@123"
        name:
          type: string
          minLength: 3
          example: "João Silva"
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "usuario@exemplo.com"
        password:
          type: string
          example: "Senha@123"
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token para autenticação
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3VhcmlvQGV4ZW1wbG8uY29tIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    Usuario:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        picture:
          type: string
          nullable: true
        accessLevel:
          type: string
          enum: [ADMIN, ADOTANTE, ONG]
    Animal:
      type: object
      properties:
        id_animal:
          type: string
          format: uuid
        nome:
          type: string
          example: "Rex"
        idade:
          type: integer
          example: 3
        porte:
          type: string
          example: "Médio"
        sexo:
          type: string
          enum: [M, F]
          example: "M"
        tipo:
          type: string
          example: "Cachorro"
        raca:
          type: string
          example: "Vira-lata"
        cor:
          type: string
          example: "Caramelo"
        observacoesAnimal:
          type: string
          example: "Animal dócil e brincalhão"
    AnimalInput:
      type: object
      required:
        - nome
        - sexo
        - tipo
      properties:
        nome:
          type: string
          example: "Rex"
        idade:
          type: integer
          example: 3
        porte:
          type: string
          example: "Médio"
        sexo:
          type: string
          enum: [M, F]
          example: "M"
        tipo:
          type: string
          example: "Cachorro"
        raca:
          type: string
          example: "Vira-lata"
        cor:
          type: string
          example: "Caramelo"
        observacoesAnimal:
          type: string
          example: "Animal dócil e brincalhão"
    EventoResponseDto:
      type: object
      description: Dados de resposta de um evento
      required:
        - id
        - titulo
        - descricao
        - dataEvento
        - local
        - ongId
        - ongNome
        - statusEvento
        - dataCriacao
        - dataAtualizacao
      properties:
        id:
          type: string
          format: uuid
          description: Identificador único do evento
          example: "550e8400-e29b-41d4-a716-446655440000"
        titulo:
          type: string
          minLength: 3
          maxLength: 200
          description: Título do evento
          example: "Adoção em Indaiatuba"
        descricao:
          type: string
          minLength: 10
          maxLength: 2000
          description: Descrição detalhada do evento
          example: "Evento de adoção de animais no parque ecológico com atividades para as crianças"
        dataEvento:
          type: string
          format: date-time
          description: Data e hora do evento (ISO 8601)
          example: "2025-11-20T10:00:00Z"
        local:
          type: string
          minLength: 5
          maxLength: 300
          description: Local onde o evento será realizado
          example: "Parque Ecológico, Indaiatuba"
        ongId:
          type: string
          format: uuid
          description: ID da ONG criadora do evento
          example: "8a8a8a8a-8a8a-8a8a-8a8a-8a8a8a8a8a8a"
        ongNome:
          type: string
          description: Nome da ONG criadora do evento
          example: "Abrigo Amigos"
        statusEvento:
          type: string
          enum:
            - ATIVO
            - CANCELADO
            - FINALIZADO
            - ADIADO
          description: Status atual do evento
          example: "ATIVO"
        dataCriacao:
          type: string
          format: date-time
          description: Data e hora de criação do evento (ISO 8601)
          example: "2025-10-15T14:30:00Z"
        dataAtualizacao:
          type: string
          format: date-time
          description: Data e hora da última atualização do evento (ISO 8601)
          example: "2025-10-15T14:30:00Z"
    CriarEventoDto:
      type: object
      description: Dados para criar um novo evento
      required:
        - titulo
        - descricao
        - dataEvento
        - local
      properties:
        titulo:
          type: string
          minLength: 3
          maxLength: 200
          description: Título do evento
          example: "Adoção em Indaiatuba"
        descricao:
          type: string
          minLength: 10
          maxLength: 2000
          description: Descrição detalhada do evento
          example: "Grande evento de adoção com mais de 50 animais disponíveis"
        dataEvento:
          type: string
          format: date-time
          description: Data e hora do evento (ISO 8601)
          example: "2025-12-10T10:00:00Z"
        local:
          type: string
          minLength: 5
          maxLength: 300
          description: Local onde o evento será realizado
          example: "Praça, Indaiatuba"
    ErroResponse:
      type: object
      description: Resposta de erro padrão da API
      required:
        - mensagem
        - status
        - timestamp
      properties:
        mensagem:
          type: string
          description: Mensagem descritiva do erro
          example: "Campo 'titulo' é obrigatório"
        status:
          type: integer
          description: Código HTTP de status do erro
          example: 400
        timestamp:
          type: string
          format: date-time
          description: Data e hora do erro (ISO 8601)
          example: "2025-10-20T10:35:00Z"
        detalhes:
          type: string
          description: Detalhes adicionais do erro (opcional)
          example: "Erro ao processar a requisição"
        campoErro:
          type: string
          description: Campo específico com erro (opcional)
          example: "titulo"
    InteresseResponseDTO:
      type: object
      description: Dados de resposta para um interesse de adoção
      properties:
        interesseId:
          type: string
          format: uuid
          description: ID do registro de interesse
        usuarioId:
          type: string
          format: uuid
          description: ID do usuário que demonstrou interesse
        nomeUsuario:
          type: string
          description: Nome do usuário
        dataDeInteresse:
          type: string
          format: date-time
          description: Data e hora que o interesse foi registrado
    AvaliarInteresseRequest:
      type: object
      description: Corpo da requisição para avaliar um interesse
      required:
        - status
      properties:
        status:
          type: string
          description: O novo status da avaliação (não pode ser PENDENTE)
          enum: [APROVADO, REJEITADO]
          example: "APROVADO"
    AdocaoStatus:
      type: string
      description: Enum dos status de adoção
      enum:
        - PENDENTE
        - APROVADO
        - REJEITADO